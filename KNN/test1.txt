0.705 (+/-0.039) for {'algorithm': 'ball_tree', 'metric': 'hamming', 'n_jobs': 4, 'weights': 'uniform'}
0.706 (+/-0.040) for {'algorithm': 'auto', 'metric': 'hamming', 'n_jobs': 4, 'weights': 'uniform'}
0.706 (+/-0.040) for {'algorithm': 'brute', 'metric': 'hamming', 'n_jobs': 4, 'weights': 'uniform'}
0.718 (+/-0.034) for {'algorithm': 'ball_tree', 'metric': 'hamming', 'n_jobs': 4, 'weights': 'distance'}
0.719 (+/-0.032) for {'algorithm': 'auto', 'metric': 'hamming', 'n_jobs': 4, 'weights': 'distance'}
0.719 (+/-0.032) for {'algorithm': 'brute', 'metric': 'hamming', 'n_jobs': 4, 'weights': 'distance'}
0.936 (+/-0.009) for {'algorithm': 'auto', 'metric': 'manhattan', 'n_jobs': 4, 'weights': 'uniform'}
0.936 (+/-0.009) for {'algorithm': 'ball_tree', 'metric': 'manhattan', 'n_jobs': 4, 'weights': 'uniform'}
0.936 (+/-0.009) for {'algorithm': 'kd_tree', 'metric': 'manhattan', 'n_jobs': 4, 'weights': 'uniform'}
0.936 (+/-0.009) for {'algorithm': 'brute', 'metric': 'manhattan', 'n_jobs': 4, 'weights': 'uniform'}
0.940 (+/-0.011) for {'algorithm': 'auto', 'metric': 'manhattan', 'n_jobs': 4, 'weights': 'distance'}
0.940 (+/-0.011) for {'algorithm': 'ball_tree', 'metric': 'manhattan', 'n_jobs': 4, 'weights': 'distance'}
0.940 (+/-0.011) for {'algorithm': 'kd_tree', 'metric': 'manhattan', 'n_jobs': 4, 'weights': 'distance'}
0.940 (+/-0.011) for {'algorithm': 'brute', 'metric': 'manhattan', 'n_jobs': 4, 'weights': 'distance'}
0.945 (+/-0.008) for {'algorithm': 'auto', 'metric': 'euclidean', 'n_jobs': 4, 'weights': 'uniform'}
0.945 (+/-0.008) for {'algorithm': 'auto', 'metric': 'minkowski', 'n_jobs': 4, 'weights': 'uniform'}
0.945 (+/-0.008) for {'algorithm': 'ball_tree', 'metric': 'euclidean', 'n_jobs': 4, 'weights': 'uniform'}
0.945 (+/-0.008) for {'algorithm': 'ball_tree', 'metric': 'minkowski', 'n_jobs': 4, 'weights': 'uniform'}
0.945 (+/-0.008) for {'algorithm': 'kd_tree', 'metric': 'minkowski', 'n_jobs': 4, 'weights': 'uniform'}
0.945 (+/-0.008) for {'algorithm': 'brute', 'metric': 'minkowski', 'n_jobs': 4, 'weights': 'uniform'}
0.949 (+/-0.011) for {'algorithm': 'auto', 'metric': 'euclidean', 'n_jobs': 4, 'weights': 'distance'}
0.949 (+/-0.011) for {'algorithm': 'auto', 'metric': 'minkowski', 'n_jobs': 4, 'weights': 'distance'}
0.949 (+/-0.011) for {'algorithm': 'ball_tree', 'metric': 'euclidean', 'n_jobs': 4, 'weights': 'distance'}
0.954 (+/-0.011) for {'algorithm': 'auto', 'metric': 'cosine', 'n_jobs': 4, 'weights': 'uniform'}
0.957 (+/-0.010) for {'algorithm': 'auto', 'metric': 'cosine', 'n_jobs': 4, 'weights': 'distance'}
nan (+/-nan) for {'algorithm': 'ball_tree', 'metric': 'cosine', 'n_jobs': 4, 'weights': 'uniform'}
nan (+/-nan) for {'algorithm': 'ball_tree', 'metric': 'cosine', 'n_jobs': 4, 'weights': 'distance'}
0.949 (+/-0.011) for {'algorithm': 'ball_tree', 'metric': 'minkowski', 'n_jobs': 4, 'weights': 'distance'}
nan (+/-nan) for {'algorithm': 'kd_tree', 'metric': 'cosine', 'n_jobs': 4, 'weights': 'uniform'}
nan (+/-nan) for {'algorithm': 'kd_tree', 'metric': 'cosine', 'n_jobs': 4, 'weights': 'distance'}
nan (+/-nan) for {'algorithm': 'kd_tree', 'metric': 'hamming', 'n_jobs': 4, 'weights': 'uniform'}
nan (+/-nan) for {'algorithm': 'kd_tree', 'metric': 'hamming', 'n_jobs': 4, 'weights': 'distance'}
0.945 (+/-0.008) for {'algorithm': 'kd_tree', 'metric': 'euclidean', 'n_jobs': 4, 'weights': 'uniform'}
0.945 (+/-0.008) for {'algorithm': 'brute', 'metric': 'euclidean', 'n_jobs': 4, 'weights': 'uniform'}
0.949 (+/-0.011) for {'algorithm': 'kd_tree', 'metric': 'euclidean', 'n_jobs': 4, 'weights': 'distance'}
0.949 (+/-0.011) for {'algorithm': 'kd_tree', 'metric': 'minkowski', 'n_jobs': 4, 'weights': 'distance'}
0.949 (+/-0.011) for {'algorithm': 'brute', 'metric': 'euclidean', 'n_jobs': 4, 'weights': 'distance'}
0.949 (+/-0.011) for {'algorithm': 'brute', 'metric': 'minkowski', 'n_jobs': 4, 'weights': 'distance'}
0.954 (+/-0.011) for {'algorithm': 'brute', 'metric': 'cosine', 'n_jobs': 4, 'weights': 'uniform'}
0.957 (+/-0.010) for {'algorithm': 'brute', 'metric': 'cosine', 'n_jobs': 4, 'weights': 'distance'}