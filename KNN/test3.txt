0.935 (+/-0.015) for {'algorithm': 'brute', 'metric': 'euclidean', 'n_jobs': 4, 'n_neighbors': 2, 'weights': 'uniform'}
0.935 (+/-0.015) for {'algorithm': 'brute', 'metric': 'minkowski', 'n_jobs': 4, 'n_neighbors': 2, 'weights': 'uniform'}
0.943 (+/-0.012) for {'algorithm': 'brute', 'metric': 'euclidean', 'n_jobs': 4, 'n_neighbors': 6, 'weights': 'uniform'}
0.943 (+/-0.012) for {'algorithm': 'brute', 'metric': 'minkowski', 'n_jobs': 4, 'n_neighbors': 6, 'weights': 'uniform'}
0.943 (+/-0.010) for {'algorithm': 'brute', 'metric': 'euclidean', 'n_jobs': 4, 'n_neighbors': 4, 'weights': 'uniform'}
0.943 (+/-0.010) for {'algorithm': 'brute', 'metric': 'minkowski', 'n_jobs': 4, 'n_neighbors': 4, 'weights': 'uniform'}
0.945 (+/-0.008) for {'algorithm': 'brute', 'metric': 'euclidean', 'n_jobs': 4, 'n_neighbors': 5, 'weights': 'uniform'}
0.945 (+/-0.008) for {'algorithm': 'brute', 'metric': 'minkowski', 'n_jobs': 4, 'n_neighbors': 5, 'weights': 'uniform'}
0.948 (+/-0.016) for {'algorithm': 'brute', 'metric': 'euclidean', 'n_jobs': 4, 'n_neighbors': 3, 'weights': 'uniform'}
0.948 (+/-0.016) for {'algorithm': 'brute', 'metric': 'minkowski', 'n_jobs': 4, 'n_neighbors': 3, 'weights': 'uniform'}
0.949 (+/-0.011) for {'algorithm': 'brute', 'metric': 'euclidean', 'n_jobs': 4, 'n_neighbors': 5, 'weights': 'distance'}
0.949 (+/-0.011) for {'algorithm': 'brute', 'metric': 'minkowski', 'n_jobs': 4, 'n_neighbors': 5, 'weights': 'distance'}
0.949 (+/-0.016) for {'algorithm': 'brute', 'metric': 'euclidean', 'n_jobs': 4, 'n_neighbors': 1, 'weights': 'uniform'}
0.949 (+/-0.016) for {'algorithm': 'brute', 'metric': 'euclidean', 'n_jobs': 4, 'n_neighbors': 1, 'weights': 'distance'}
0.949 (+/-0.016) for {'algorithm': 'brute', 'metric': 'euclidean', 'n_jobs': 4, 'n_neighbors': 2, 'weights': 'distance'}
0.949 (+/-0.016) for {'algorithm': 'brute', 'metric': 'minkowski', 'n_jobs': 4, 'n_neighbors': 1, 'weights': 'uniform'}
0.949 (+/-0.016) for {'algorithm': 'brute', 'metric': 'minkowski', 'n_jobs': 4, 'n_neighbors': 1, 'weights': 'distance'}
0.949 (+/-0.016) for {'algorithm': 'brute', 'metric': 'minkowski', 'n_jobs': 4, 'n_neighbors': 2, 'weights': 'distance'}
0.950 (+/-0.016) for {'algorithm': 'brute', 'metric': 'euclidean', 'n_jobs': 4, 'n_neighbors': 3, 'weights': 'distance'}
0.950 (+/-0.016) for {'algorithm': 'brute', 'metric': 'minkowski', 'n_jobs': 4, 'n_neighbors': 3, 'weights': 'distance'}
0.951 (+/-0.014) for {'algorithm': 'brute', 'metric': 'cosine', 'n_jobs': 4, 'n_neighbors': 2, 'weights': 'uniform'}
0.951 (+/-0.011) for {'algorithm': 'brute', 'metric': 'euclidean', 'n_jobs': 4, 'n_neighbors': 6, 'weights': 'distance'}
0.951 (+/-0.011) for {'algorithm': 'brute', 'metric': 'minkowski', 'n_jobs': 4, 'n_neighbors': 6, 'weights': 'distance'}
0.952 (+/-0.015) for {'algorithm': 'brute', 'metric': 'euclidean', 'n_jobs': 4, 'n_neighbors': 4, 'weights': 'distance'}
0.952 (+/-0.015) for {'algorithm': 'brute', 'metric': 'minkowski', 'n_jobs': 4, 'n_neighbors': 4, 'weights': 'distance'}
0.953 (+/-0.010) for {'algorithm': 'brute', 'metric': 'cosine', 'n_jobs': 4, 'n_neighbors': 6, 'weights': 'uniform'}
0.954 (+/-0.011) for {'algorithm': 'brute', 'metric': 'cosine', 'n_jobs': 4, 'n_neighbors': 5, 'weights': 'uniform'}
0.955 (+/-0.012) for {'algorithm': 'brute', 'metric': 'cosine', 'n_jobs': 4, 'n_neighbors': 3, 'weights': 'uniform'}
0.955 (+/-0.013) for {'algorithm': 'brute', 'metric': 'cosine', 'n_jobs': 4, 'n_neighbors': 4, 'weights': 'uniform'}
0.956 (+/-0.008) for {'algorithm': 'brute', 'metric': 'cosine', 'n_jobs': 4, 'n_neighbors': 1, 'weights': 'uniform'}
0.956 (+/-0.008) for {'algorithm': 'brute', 'metric': 'cosine', 'n_jobs': 4, 'n_neighbors': 1, 'weights': 'distance'}
0.956 (+/-0.008) for {'algorithm': 'brute', 'metric': 'cosine', 'n_jobs': 4, 'n_neighbors': 2, 'weights': 'distance'}
0.957 (+/-0.010) for {'algorithm': 'brute', 'metric': 'cosine', 'n_jobs': 4, 'n_neighbors': 5, 'weights': 'distance'}
0.957 (+/-0.011) for {'algorithm': 'brute', 'metric': 'cosine', 'n_jobs': 4, 'n_neighbors': 6, 'weights': 'distance'}
0.957 (+/-0.013) for {'algorithm': 'brute', 'metric': 'cosine', 'n_jobs': 4, 'n_neighbors': 3, 'weights': 'distance'}
0.959 (+/-0.014) for {'algorithm': 'brute', 'metric': 'cosine', 'n_jobs': 4, 'n_neighbors': 4, 'weights': 'distance'}